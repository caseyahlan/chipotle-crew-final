<<<<<<< HEAD
data.frame(Titanic, stringsAsFactors = FALSE)
children <- Titanic[Titanic$Age == "Child", ]
data.frame(Titanic, stringsAsFactors = FALSE, optional = FALSE)
children <- Titanic[Titanic$Age == "Child", ]
Titanic <- data.frame(Titanic, stringsAsFactors = FALSE)
children <- Titanic[Titanic$Age == "Child", ]
?sum
#
children.num <- sum(children)
print(children)
children.num <- sum(children$Class)
children.num <- sum(children$Sex)
children.num <- sum(children$Freq)
print(children.num)
us.v.cuba <- CompareCountries("United States", "Cuba")
CompareCountries <- function(country1, country2) {
twocountries <- data.frame("country" = life.expectancy$country,
"le_2013" = life.expectancy$le_2013,
"change" = life.expectancy$change)
frame <- twocountries[twocountries$country %in% c(country1, country2), ]
print(frame, row.name = FALSE)
}
us.v.cuba <- CompareCountries("United States", "Cuba")
#################
#### PART 1 #####
#################
# Create a vector "names" with the names of the 6 TAs in the course
ta.names <- c("Andrea", "Chris", "Dylan", "Evan", "Iman", "Jack")
# Create a vector "math.grades" with 6 hypothetical grades in a math course (that correspond to the 6 names above)
math.grades <- c(runif(6, min = 0, max = 100))
# Create a vector "spanish.grades" with 6 hypothetical grades in a Spanish course
spanish.grades <- c(runif(6, min = 0, max = 100))
# Create a data frame variable "tas" by combining those three vectors
tas <- data.frame(ta.names, math.grades, spanish.grades, stringsAsFactors = FALSE)
# Print a sentence describing rows and columns
# a function that describes rows and columns
print(paste("The TA data frame has", nrow(tas), "rows, and", ncol(tas), "columns:", paste((colnames(tas)), collapse = ", ")))
# Give names for the rows
rownames(tas) <- ta.names
print(tas)
# Print the row of grades for my TA
print(tas["Chris", ])
# Add a new column, "grade.diff"
tas$grade.diff <- math.grades - spanish.grades
# Add a column, "num.better.at.math"
tas$num.better.at.math <- tas$grade.diff > 0
print(tas$num.better.at.math)
# Write the data frame into a new csv file, do not include rownames
write.csv(tas, "data/grade_data.csv", row.names = FALSE)
#################
#### PART 2 #####
#################
# Read the life expectancy file and store it into a variable called "life.expectancy"
life.expectancy <- read.csv("data/life_expectancy.csv", stringsAsFactors = FALSE)
# Add a column "change" that is the difference in life expectancy between 1960 and 2013
life.expectancy$change <-life.expectancy$le_2013 - life.expectancy$le_1960
# Create and print variable called num.small.gain that has the number of countries whose life expectancy changed by less than 5 years
num.small.gain <- nrow(life.expectancy[life.expectancy$change > 5, ])
print(num.small.gain)
# Create and print a variable called "most.improved" that is the name of the country with the largest gain in life expectancy
MostImproved <- function(ddata) {
most <- max(ddata$change)
return(ddata[ddata$change == most, "country"])
}
most.improved <- MostImproved(life.expectancy)
print(most.improved)
# Define a function CountryChange that produces a country's change in life expectancy
countries.le <- life.expectancy$country
rownames(life.expectancy) <- countries.le
# a function that gives a country's change in life expectancy
CountryChange <- function(country) {
print(life.expectancy[country, "change"])
}
CountryChange("Haiti")
# Define a function "LowestLifeExpinRegion" that takes in region and returns country with the lowest life expectancy
# a function that determines the country with the lowest life expectancy in a region
LowestLifeExpinRegion <- function(a.region) {
countriesir <- life.expectancy[life.expectancy$region == a.region, ]
lowest <- min(countriesir$change)
return(countriesir[countriesir$change == lowest , "country"])
}
LowestLifeExpinRegion("South Asia")
# Define a function CompareCountries that takes in two country names and returns a dataframe
CompareCountries <- function(country1, country2) {
twocountries <- data.frame("country" = life.expectancy$country,
"le_2013" = life.expectancy$le_2013,
"change" = life.expectancy$change)
frame <- twocountries[twocountries$country %in% c(country1, country2), ]
print(frame, row.name = FALSE)
}
# Use the CompareCountries function to compare the life expectancies of the United States and Cuba, and store into a variable "us.v.cuba"
us.v.cuba <- CompareCountries("United States", "Cuba")
#################
#### PART 3 #####
#################
# Load the Titanic dataset and view
data(Titanic)
View(Titanic)
# Use the is.data.frame() function to confirm that Titanic is a table and not a dataframe
is.data.frame(Titanic)
# Convert Titanic to a dataframe
Titanic <- data.frame(Titanic, stringsAsFactors = FALSE)
# Create a variable "children" that are the rows of the dataframe with info about the children
children <- Titanic[Titanic$Age == "Child", ]
# Create a variable "children.num" that is the total number of children on the Titanic
children.num <- sum(children$Freq)
print(children.num)
mostlosses <- print(paste(max(Titanic$Survived == "no", "Class"), max(Titanic$Survived == "no", "Sex"), max(Titanic$Survived == "no", "Age"))
mostlosses <- paste(max(Titanic$Survived == "no", "Class"), max(Titanic$Survived == "no", "Sex"), max(Titanic$Survived == "no", "Age"))
mostlosses <- paste(max(Titanic$Survived == "no", "Class"), max(Titanic$Survived == "no", "Sex"), max(Titanic$Survived == "no", "Age"))
print(mostlosses)
mostlosses <- paste([max(Titanic$Survived == "no", "Class"], max[Titanic$Survived == "no", "Sex"], max[Titanic$Survived == "no", "Age"])
mostlosses <- paste([max(Titanic$Survived == "no", "Class"], max[Titanic$Survived == "no", "Sex"], max[Titanic$Survived == "no", "Age"])
mostlosses <- paste([max(Titanic$Survived == "no"), "Class"], [max(Titanic$Survived == "no"), "Sex"], [max(Titanic$Survived == "no"), "Age"])
mostlosses <- paste(Titanic[max(Titanic$Survived == "no"), "Class"], Titanic[max(Titanic$Survived == "no"), "Sex"], Titanic[max(Titanic$Survived == "no"), "Age"])
print(mostlosses)
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titanic$Freq)
print(paste(Titaniclosses[Titaniclosses[Freq] == maxlosses, "Class"],
Titaniclosses[Titaniclosses[Freq] == maxlosses, "Sex"],
Titaniclosses[Titaniclosses[Freq] == maxlosses, "Age"]))
}
MostLosses(Titanic)
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titanic$Freq)
print(paste(Titaniclosses[Titaniclosses$Freq == maxlosses, "Class"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Sex"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Age"]))
}
MostLosses(Titanic)
Titanic <- data.frame(Titanic, stringsAsFactors = FALSE)
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titanic$Freq)
print(paste(Titaniclosses[Titaniclosses$Freq == maxlosses, "Class"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Sex"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Age"]))
}
MostLosses(Titanic)
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titanic$Freq)
# Output the row in the data frame which has the largest absolute number of losses
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titanic$Freq)
print(paste(Titaniclosses[Titaniclosses$Freq == maxlosses, "Class"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Sex"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Age"]))
}
MostLosses(Titanic)
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titaniclosses$Freq)
print(paste(Titaniclosses[Titaniclosses$Freq == maxlosses, "Class"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Sex"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Age"]))
}
MostLosses(Titanic)
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titaniclosses[Freq])
print(paste(Titaniclosses[Titaniclosses$Freq == maxlosses, "Class"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Sex"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Age"]))
}
MostLosses(Titanic)
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titaniclosses[Freq])
print(paste(Titaniclosses[Titaniclosses[Freq] == maxlosses, "Class"],
Titaniclosses[Titaniclosses[Freq] == maxlosses, "Sex"],
Titaniclosses[Titaniclosses[Freq] == maxlosses, "Age"]))
}
MostLosses(Titanic)
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titaniclosses[Freq])
print(Titaniclosses)
data(Titanic)
Titanic <- data.frame(Titanic, stringsAsFactors = FALSE)
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titaniclosses[Freq])
print(paste(Titaniclosses[Titaniclosses[Freq] == maxlosses, "Class"],
Titaniclosses[Titaniclosses[Freq] == maxlosses, "Sex"],
Titaniclosses[Titaniclosses[Freq] == maxlosses, "Age"]))
}
MostLosses(Titanic)
print(Titaniclosses)
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
print(Titaniclosses)
data(Titanic)
View(Titanic)
Titanic <- data.frame(Titanic, stringsAsFactors = FALSE)
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
print(Titaniclosses)
Titaniclosses <- Titanic[Titanic$Survived == "No", ]
print(Titaniclosses)
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "No", ]
maxlosses <- max(Titaniclosses[Freq])
print(paste(Titaniclosses[Titaniclosses[Freq] == maxlosses, "Class"],
Titaniclosses[Titaniclosses[Freq] == maxlosses, "Sex"],
Titaniclosses[Titaniclosses[Freq] == maxlosses, "Age"]))
}
MostLosses(Titanic)
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "No", ]
maxlosses <- max(Titaniclosses$Freq)
print(paste(Titaniclosses[Titaniclosses$Freq == maxlosses, "Class"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Sex"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Age"]))
}
print(Titaniclosses)
MostLosses(Titanic)
mostlosses <- MostLosses(Titanic)
?sum
SurvivalRate <- function(ticketclass) {
totalmen <- sum(Titanic$Freq, Titanic$Class == ticketclass, Titanic$Sex == "Male", Titanic$Age == "Adult")
survivedmen <- sum(Titanic$Freq, Titanic$Class == ticketclass, Titanic$Sex == "Male", Titanic$Age == "Adult", Titanic$Survived == "Yes")
survivalrate
rateofmen <- survivedmen/totalmen
totalwomen <- sum(Titanic$Freq, Titanic$Class == ticketclass, Titanic$Sex == "Female", Titanic$Age == "Adult")
totalchildren <- sum(Titanic$Freq, Titanic$Class == ticketclass, Titanic$Age == "Child")
survivedwomen <- sum(Titanic$Freq, Titanic$Class == ticketclass, Titanic$Sex == "Female", Titanic$Age == "Adult", Titanic$Survived = "Yes")
survivedchildren <- sum(Titanic$Freq, Titanic$Class == ticketclass, Titanic$Age == "Child", Titanic$Survived == "Yes")
survivedwc <- survivedwomen + survivedchildren
totalwc <- totalchildren + totalwomen
rateofwc <- survivedwc/totalwc
print(paste("Of", ticketclass, "class," survivedwc, "% of women and children survived and", survivedmen, "% of men survived."))
}
# Define a function "SurvivalRate" that takes in a ticket class and returns a sentence about the survival rate.
SurvivalRate <- function(ticketclass) {
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Age == "Adult", Titanic$Class == ticketclass,]
totalmen <- sum(Titanicmen$Freq)
Titanicsurvivedmen <- Titanicmen[Titanicmen$Survived == "Yes", ]
survivedmen <- sum(Titanicsurvivedmen$Freq)
rateofmen <- survivedmen/totalmen
Titanicwomen <- Titanic[Titanic$Sex == "Female", Titanic$Age == "Adult", Titanic$Class == ticketclass,]
totalwomen <- sum(Titanicwomen$Freq)
Titanicchildren <- Titanic[Titanic$Age == "Child", Titanic$Class == ticketclass,]
totalchildren <- sum(Titanicchildren$Freq)
Titanicsurvivedwomen <- Titanicwomen[Titanicwomen$Survived == "Yes", ]
survivedwomen <- sum(Titanicsurvivedwomen$Freq)
Titanicsuvivedchildren <- Titanicchildren[Titanicchildren$Survived == "Yes", ]
survivedchildren <- sum(Titanicsuvivedchildren$Freq)
totalwc <- totalwomen + totalchildren
survivedwc <- survivedwomen + survivedchildren
rateofwc <- survivedwc/totalwc
print(paste("Of", ticketclass, "class," rateofwc, "% of women and children survived and", rateofmen, "% of men survived."))
}
SurvivalRate <- function(ticketclass) {
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Age == "Adult", Titanic$Class == ticketclass,]
totalmen <- sum(Titanicmen$Freq)
Titanicsurvivedmen <- Titanicmen[Titanicmen$Survived == "Yes", ]
survivedmen <- sum(Titanicsurvivedmen$Freq)
rateofmen <- survivedmen/totalmen
Titanicwomen <- Titanic[Titanic$Sex == "Female", Titanic$Age == "Adult", Titanic$Class == ticketclass,]
totalwomen <- sum(Titanicwomen$Freq)
Titanicchildren <- Titanic[Titanic$Age == "Child", Titanic$Class == ticketclass,]
totalchildren <- sum(Titanicchildren$Freq)
Titanicsurvivedwomen <- Titanicwomen[Titanicwomen$Survived == "Yes", ]
survivedwomen <- sum(Titanicsurvivedwomen$Freq)
Titanicsuvivedchildren <- Titanicchildren[Titanicchildren$Survived == "Yes", ]
survivedchildren <- sum(Titanicsuvivedchildren$Freq)
totalwc <- totalwomen + totalchildren
survivedwc <- survivedwomen + survivedchildren
rateofwc <- survivedwc/totalwc
print(paste("Of", ticketclass, "class,", rateofwc, "% of women and children survived and", rateofmen, "% of men survived."))
}
SurvivalRate("Crew")
# Define a function "SurvivalRate" that takes in a ticket class and returns a sentence about the survival rate.
SurvivalRate <- function(ticketclass) {
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Age == "Adult", Titanic$Class == ticketclass,]
totalmen <- sum(Titanicmen$Freq)
Titanicsurvivedmen <- Titanicmen[Titanicmen$Survived == "Yes", ]
survivedmen <- sum(Titanicsurvivedmen$Freq)
rateofmen <- survivedmen/totalmen
Titanicwomen <- Titanic[Titanic$Sex == "Female", Titanic$Age == "Adult", Titanic$Class == ticketclass,]
totalwomen <- sum(Titanicwomen$Freq)
Titanicchildren <- Titanic[Titanic$Age == "Child", Titanic$Class == ticketclass,]
totalchildren <- sum(Titanicchildren$Freq)
Titanicsurvivedwomen <- Titanicwomen[Titanicwomen$Survived == "Yes", ]
survivedwomen <- sum(Titanicsurvivedwomen$Freq)
Titanicsuvivedchildren <- Titanicchildren[Titanicchildren$Survived == "Yes", ]
survivedchildren <- sum(Titanicsuvivedchildren$Freq)
totalwc <- totalwomen + totalchildren
survivedwc <- survivedwomen + survivedchildren
rateofwc <- survivedwc/totalwc
print(paste("Of", ticketclass, "class,", rateofwc, "% of women and children survived and", rateofmen, "% of men survived."))
}
SurvivalRate("Crew")
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Age == "Adult", Titanic$Class == ticketclass,]
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Age == "Adult", Titanic$Class == "Crew", ]
Titanic <- data.frame(Titanic, stringsAsFactors = FALSE)
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Age == "Adult", Titanic$Class == "Crew", ]
children <- Titanic[Titanic$Age == "Child", ]
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Age == "Adult", Titanic$Class == "Crew", ]
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Age =="Adult", Titanic$Class == "Crew", ]
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Class == "Crew", ]
Titanicmen <- Titanic[Titanic$Sex == "Male", ]
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Class == "Crew", Titanic$Age == "Adult"]
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Class == "Crew", Titanic$Age == "Adult", ]
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Class == "Crew", Titanic$Age == "Adult", ]
titanicmen <- Titanic[!(Titanic$Sex == "Male" & Titanic$Class == "Crew" & Titanic$Age == "Adult"), ]
print(titanicmen)
titanicmen <- Titanic[!(Titanic$Sex == "Male" & Titanic$Class == "Crew" & Titanic$Age == "Adult"), ]
print(titanicmen)
titanicmen <- Titanic[!(Titanic$Sex == "Male" & Titanic$Class == "Crew" & Titanic$Age == "Adult"), ]
print(titanicmen)
Titanicmen <- Titanic[Titanic$Sex == "Male", ]
Titanicadultmen <- Titanicmen[Titanicadultmen$Age == "Adult",]
Titanicadultmeninclass <- Titanicadultmen[Titanicadultmen$Class == ticketclass,]
totalmen <- sum(Titanicadultmeninclass$Freq)
Titanicsurvivedmen <- Titanicadultmeninclass[Titanicadultmeninclass$Survived == "Yes", ]
survivedmen <- sum(Titanicsurvivedmen$Freq)
rateofmen <- survivedmen/totalmen
Titanicmen <- Titanic[Titanic$Sex == "Male", ]
Titanicadultmen <- Titanicmen[Titanicadultmen$Age == "Adult",]
Titanicadultmen <- Titanicmen[Titanicmen$Age == "Adult",]
Titanicmen <- Titanic[Titanic$Sex == "Male", ]
Titanicadultmen <- Titanicmen[Titanicmen$Age == "Adult",]
Titanicadultmeninclass <- Titanicadultmen[Titanicadultmen$Class == ticketclass,]
totalmen <- sum(Titanicadultmeninclass$Freq)
Titanicsurvivedmen <- Titanicadultmeninclass[Titanicadultmeninclass$Survived == "Yes", ]
survivedmen <- sum(Titanicsurvivedmen$Freq)
rateofmen <- survivedmen/totalmen
SurvivalRate <- function(ticketclass) {
Titanicmen <- Titanic[Titanic$Sex == "Male", ]
Titanicadultmen <- Titanicmen[Titanicmen$Age == "Adult",]
Titanicadultmeninclass <- Titanicadultmen[Titanicadultmen$Class == ticketclass,]
totalmen <- sum(Titanicadultmeninclass$Freq)
Titanicsurvivedmen <- Titanicadultmeninclass[Titanicadultmeninclass$Survived == "Yes", ]
survivedmen <- sum(Titanicsurvivedmen$Freq)
rateofmen <- survivedmen/totalmen
SurvivalRate <- function(ticketclass) {
Titanicmen <- Titanic[Titanic$Sex == "Male", ]
Titanicadultmen <- Titanicmen[Titanicmen$Age == "Adult",]
Titanicadultmeninclass <- Titanicadultmen[Titanicadultmen$Class == ticketclass,]
totalmen <- sum(Titanicadultmeninclass$Freq)
Titanicsurvivedmen <- Titanicadultmeninclass[Titanicadultmeninclass$Survived == "Yes", ]
survivedmen <- sum(Titanicsurvivedmen$Freq)
rateofmen <- survivedmen/totalmen
Titanicwomen <- Titanic[Titanic$Sex == "Female",]
Titanicadultwomen <- Titanicwomen[Titanicwomen$Age == "Adult",]
Titanicadultwomeninclass <- Titanicadultwomen[Titanicadultwomen$Class == ticketclass,]
totalwomen <- sum(Titanicadultwomeninclass$Freq)
Titanicchildren <- Titanic[Titanic$Age == "Child",]
Titanicchildreninclass <- Titanicchildren[Titanicchildren$Class == ticketclass,]
totalchildren <- sum(Titanicchildreninclass$Freq)
Titanicsurvivedwomen <- Titanicadultwomeninclass[Titanicadultwomeninclass$Survived == "Yes", ]
survivedwomen <- sum(Titanicsurvivedwomen$Freq)
Titanicsuvivedchildren <- Titanicchildreninclass[Titanicchildreninclass$Survived == "Yes", ]
survivedchildren <- sum(Titanicsuvivedchildren$Freq)
totalwc <- totalwomen + totalchildren
survivedwc <- survivedwomen + survivedchildren
rateofwc <- survivedwc/totalwc
print(paste("Of", ticketclass, "class,", rateofwc, "% of women and children survived and", rateofmen, "% of men survived."))
}
SurvivalRate("Crew")
print(SurvivalRate("Crew"))
library(jsonlite)
library(httr)
library(dplyr)
resource <- GET("http://pokeapi.co/api/v2")
baseurl <- content(resource)
baseurl <- ("http://pokeapi.co/api/v2")
baseurl <- ("http://pokeapi.co/api/v2")
movie <- c("oddish", "bellsprout", "vileplume", "ponyta")
pokemon.url <- paste0(baseurl, "/pokemon/", movie, "/")
response <- GET(pokemon.url)
print(pokemon.url)
movie <- ("oddish")
response <- GET(pokemon.url)
pokemon.url <- paste0(baseurl, "/pokemon/", movie, "/")
response <- GET(pokemon.url)
?names
names(response)
return(response$status_code)
print(response$status_code)
body <- content(response, "text")
response <- GET(pokemon.url)
body <- content(response, "text")
pokemon.url <- paste0(baseurl, "/pokemon/", movie, "/") %>% print()
body <- content(response, "text")
body
poke.data <- fromJSON(body)
names(poke.data)
is.data.frame(poke.data) %>% print()
is.data.frame(poke.data$moves) %>% print()
poke.moves <- head(poke.data$moves)
poke.moves <- flatten(poke.moves)
colnames(poke.moves)
colnames(poke.moves) %>% print()
poke.moves <- poke.moves %>% select(move.name)
print(poke.moves)
poke.moves <- mutate(poke.moves, move.type = c("normal", "normal", "normal", "normal", "poison", "grass"), move.rate = runif(6, min = 1, max = 5))
print(poke.moves)
poke.moves <- mutate(poke.moves, move.type = c("normal", "normal", "normal", "normal", "poison", "grass"), move.rate = runif(6, min = 1, max = 5))
print(poke.moves)
poke.moves <- mutate(poke.moves, move.type = c("normal", "normal", "normal", "normal", "poison", "grass"), move.rate = round(runif(6, min = 1, max = 5), digits = -2))
print(poke.moves)
poke.moves <- mutate(poke.moves, move.type = c("normal", "normal", "normal", "normal", "poison", "grass"), move.rate = round(runif(6, min = 1, max = 5), digits = 0))
print(poke.moves)
poke.moves %>% arrange(-move.rate)
countdownSB <- spring.break - Sys.Date()
countdownbday <- as.Date(2017-05-04) - Sys.Date()
bday <- as.Date(2017-05-04)
bday <- as.Date(2017/05/04)
bday <- as.Date("2017/05/04")
countdownbday <- bday - Sys.Date()
daysof <- as.Date("2015/06/05") - Sys.Date
daysof <- as.Date("2015/06/05") - Sys.Date(),
daysof <- as.Date("2015/06/05") - Sys.Date()
print(countdownSB)
print(countdownbday)
print(spring.break)
countdownSB <- as.Date("2017/03/14") - Sys.Date()
print(countdownSB)
print(countdownbday)
print(spring.break)
print(daysof)
daysof <- Sys.Date() - as.Date("2015/06/05")
print(daysof)
print(countdownSB)
print(countdownbday)
print(spring.break)
print(daysof)
countdownSB <- as.Date("2017/03/14") - Sys.Date()
countdownbday <- bday - Sys.Date()
bday <- as.Date("2017/05/04")
daysof <- Sys.Date() - as.Date("2015/06/05")
print(countdownSB)
print(countdownbday)
print(spring.break)
print(daysof)
shiny::runApp('Desktop/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
runApp()
runApp('Desktop/info201/chipotle-crew-final')
runApp()
runApp('Desktop/info201/chipotle-crew-final')
runApp()
runApp('Desktop/info201/chipotle-crew-final')
runApp()
runApp('Desktop/info201/chipotle-crew-final')
runApp()
runApp('Desktop/info201/chipotle-crew-final')
runApp()
runApp('Desktop/info201/chipotle-crew-final')
runApp()
runApp('Desktop/info201/chipotle-crew-final')
runApp()
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
runApp()
runApp('Desktop/info201/chipotle-crew-final')
runApp()
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
runApp()
runApp('Desktop/info201/chipotle-crew-final')
runApp()
runApp('Desktop/info201/chipotle-crew-final')
View(house.114)
cmd <- 'curl "https://api.propublica.org/congress/v1/114/house/members.json" -H "X-API-Key: ApPfi2HAhD1AurYPyWXqU42XvSudAwVC3sQqvuYT"'
parsed_cmd <- straighten(cmd)
str(parsed_cmd)
actual_function <- make_req(parsed_cmd)[[1]]
request.body.list <- content(actual_function())
members.list <- request.body.list$results[[1]]$members
names(members.list) <- NULL
members.json <- toJSON(members.list)
house.114 <- flatten(fromJSON(members.json, flatten = TRUE)) %>%
select(first_name, last_name, party, state, missed_votes_pct, votes_with_party_pct)
house.114 <- house.114[!sapply(house.114$votes_with_party_pct,is.null),]
View(house.114)
cmd <- 'curl "https://api.propublica.org/congress/v1/115/house/members.json" -H "X-API-Key: ApPfi2HAhD1AurYPyWXqU42XvSudAwVC3sQqvuYT"'
parsed_cmd <- straighten(cmd)
str(parsed_cmd)
actual_function <- make_req(parsed_cmd)[[1]]
request.body.list <- content(actual_function())
members.list <- request.body.list$results[[1]]$members
names(members.list) <- NULL
members.json <- toJSON(members.list)
house.115 <- flatten(fromJSON(members.json, flatten = TRUE)) %>%
select(first_name, last_name, party, state, missed_votes_pct, votes_with_party_pct)
house.115 <- house.115[!sapply(house.115$votes_with_party_pct,is.null),]
View(house.115)
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
runApp()
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
runApp()
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
runApp()
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
runApp()
Q
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
runApp()
runApp('Desktop/info201/chipotle-crew-final')
=======
x21, x22, x23, x24, x25, x26)
View(x)
col.names <- colnames(x)
col.names
x <- gather(x, key = stuff,
value  = col.names, convert = TRUE)
View(x)
View(x)
GetPartyMakeup <- function(roll.id) {
base <- ("http://congress.api.sunlightfoundation.com/")
votes.resource <- ("votes?roll_id=")
votes.filters <- ("&fields=voters")
votes.response <- GET(paste0(base, votes.resource, roll.id, votes.filters))
request.body.as.list <- content(votes.response)
voters.list <- request.body.as.list$results[[1]]$voters
names(voters.list) <- NULL
voters.json <- toJSON(voters.list)
voters.as.data.frame <- flatten(fromJSON(voters.json, flatten=TRUE))
voters <- voters.as.data.frame %>% select(voter.party, voter.gender, vote)
voters$voter.party <- as.factor(unlist(voters$voter.party))
voters.party <- tally(group_by(voters, voter.party))
return(voters.party)
}
x1 <- GetPartyMakeup("s1-2009")
colnames(x1)[2] <- "1"
x2 <- GetPartyMakeup("s215-2009") %>% select(n)
colnames(x2)[1] <- "2"
x3 <- GetPartyMakeup("s397-2009") %>% select(n)
colnames(x3)[1] <- "3"
x4 <- GetPartyMakeup("s1-2010") %>% select(n)
colnames(x4)[1] <- "4"
x5 <- GetPartyMakeup("s105-2010") %>% select(n)
colnames(x5)[1] <- "5"
x6 <- GetPartyMakeup("s299-2010") %>% select(n)
colnames(x6)[1] <- "6"
x7 <- GetPartyMakeup("s1-2011") %>% select(n)
colnames(x7)[1] <- "7"
x8 <- GetPartyMakeup("s105-2011") %>% select(n)
colnames(x8)[1] <- "8"
x9 <- GetPartyMakeup("s235-2011") %>% select(n)
colnames(x9)[1] <- "9"
x10 <- GetPartyMakeup("s1-2012") %>% select(n)
colnames(x10)[1] <- "10"
x11 <- GetPartyMakeup("s173-2012") %>% select(n)
colnames(x11)[1] <- "11"
x12 <- GetPartyMakeup("s250-2012") %>% select(n)
colnames(x12)[1] <- "12"
x13 <- GetPartyMakeup("s1-2013") %>% select(n)
colnames(x13)[1] <- "13"
x14 <- GetPartyMakeup("s169-2013") %>% select(n)
colnames(x14)[1] <- "14"
x15 <- GetPartyMakeup("s291-2013") %>% select(n)
colnames(x15)[1] <- "15"
x16 <- GetPartyMakeup("s1-2014") %>% select(n)
colnames(x16)[1] <- "16"
x17 <- GetPartyMakeup("s217-2014") %>% select(n)
colnames(x17)[1] <- "17"
x18 <- GetPartyMakeup("s366-2014") %>% select(n)
colnames(x18)[1] <- "18"
x19 <- GetPartyMakeup("s1-2015") %>% select(n)
colnames(x19)[1] <- "19"
x20 <- GetPartyMakeup("s221-2015") %>% select(n)
colnames(x20)[1] <- "20"
x21 <- GetPartyMakeup("s339-2015") %>% select(n)
colnames(x21)[1] <- "21"
x22 <- GetPartyMakeup("s1-2016") %>% select(n)
colnames(x22)[1] <- "22"
x23 <- GetPartyMakeup("s91-2016") %>% select(n)
colnames(x23)[1] <- "23"
x24 <- GetPartyMakeup("s163-2016") %>% select(n)
colnames(x24)[1] <- "24"
x25 <- GetPartyMakeup("s1-2017") %>% select(n)
colnames(x25)[1] <- "25"
x26 <- GetPartyMakeup("s80-2017") %>% select(n)
colnames(x26)[1] <- "26"
x <- cbind(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20,
x21, x22, x23, x24, x25, x26)
View(x)
View(x)
x <- gather(x, key = stuff,
value  = 1:26,
voter.party, convert = TRUE)
x <- gather(x, key = stuff,
value  = 1:26,
voter.party, convert = TRUE)
x <- gather(x, key = stuff,
value  = col.names,
voter.party, convert = TRUE)
View(x)
x <- gather(x, key = stuff,
value  = col.names,
voter.party, convert = TRUE)
x <- gather(x, key = stuff,
value  = col.names,
voter.party, convert = TRUE)
GetPartyMakeup <- function(roll.id) {
base <- ("http://congress.api.sunlightfoundation.com/")
votes.resource <- ("votes?roll_id=")
votes.filters <- ("&fields=voters")
votes.response <- GET(paste0(base, votes.resource, roll.id, votes.filters))
request.body.as.list <- content(votes.response)
voters.list <- request.body.as.list$results[[1]]$voters
names(voters.list) <- NULL
voters.json <- toJSON(voters.list)
voters.as.data.frame <- flatten(fromJSON(voters.json, flatten=TRUE))
voters <- voters.as.data.frame %>% select(voter.party, voter.gender, vote)
voters$voter.party <- as.factor(unlist(voters$voter.party))
voters.party <- tally(group_by(voters, voter.party))
return(voters.party)
}
x1 <- GetPartyMakeup("s1-2009")
colnames(x1)[2] <- "1"
x2 <- GetPartyMakeup("s215-2009") %>% select(n)
colnames(x2)[1] <- "2"
x3 <- GetPartyMakeup("s397-2009") %>% select(n)
colnames(x3)[1] <- "3"
x4 <- GetPartyMakeup("s1-2010") %>% select(n)
colnames(x4)[1] <- "4"
x5 <- GetPartyMakeup("s105-2010") %>% select(n)
colnames(x5)[1] <- "5"
x6 <- GetPartyMakeup("s299-2010") %>% select(n)
colnames(x6)[1] <- "6"
x7 <- GetPartyMakeup("s1-2011") %>% select(n)
colnames(x7)[1] <- "7"
x8 <- GetPartyMakeup("s105-2011") %>% select(n)
colnames(x8)[1] <- "8"
x9 <- GetPartyMakeup("s235-2011") %>% select(n)
colnames(x9)[1] <- "9"
x10 <- GetPartyMakeup("s1-2012") %>% select(n)
colnames(x10)[1] <- "10"
x11 <- GetPartyMakeup("s173-2012") %>% select(n)
colnames(x11)[1] <- "11"
x12 <- GetPartyMakeup("s250-2012") %>% select(n)
colnames(x12)[1] <- "12"
x13 <- GetPartyMakeup("s1-2013") %>% select(n)
colnames(x13)[1] <- "13"
x14 <- GetPartyMakeup("s169-2013") %>% select(n)
colnames(x14)[1] <- "14"
x15 <- GetPartyMakeup("s291-2013") %>% select(n)
colnames(x15)[1] <- "15"
x16 <- GetPartyMakeup("s1-2014") %>% select(n)
colnames(x16)[1] <- "16"
x17 <- GetPartyMakeup("s217-2014") %>% select(n)
colnames(x17)[1] <- "17"
x18 <- GetPartyMakeup("s366-2014") %>% select(n)
colnames(x18)[1] <- "18"
x19 <- GetPartyMakeup("s1-2015") %>% select(n)
colnames(x19)[1] <- "19"
x20 <- GetPartyMakeup("s221-2015") %>% select(n)
colnames(x20)[1] <- "20"
x21 <- GetPartyMakeup("s339-2015") %>% select(n)
colnames(x21)[1] <- "21"
x22 <- GetPartyMakeup("s1-2016") %>% select(n)
colnames(x22)[1] <- "22"
x23 <- GetPartyMakeup("s91-2016") %>% select(n)
colnames(x23)[1] <- "23"
x24 <- GetPartyMakeup("s163-2016") %>% select(n)
colnames(x24)[1] <- "24"
x25 <- GetPartyMakeup("s1-2017") %>% select(n)
colnames(x25)[1] <- "25"
x26 <- GetPartyMakeup("s80-2017") %>% select(n)
colnames(x26)[1] <- "26"
x <- cbind(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20,
x21, x22, x23, x24, x25, x26)
View(x)
col.names <- colnames(x)[-1]
col.names
x <- gather(x, key = stuff,
value  = col.names,
voter.party, convert = TRUE)
View(x)
GetPartyMakeup <- function(roll.id) {
base <- ("http://congress.api.sunlightfoundation.com/")
votes.resource <- ("votes?roll_id=")
votes.filters <- ("&fields=voters")
votes.response <- GET(paste0(base, votes.resource, roll.id, votes.filters))
request.body.as.list <- content(votes.response)
voters.list <- request.body.as.list$results[[1]]$voters
names(voters.list) <- NULL
voters.json <- toJSON(voters.list)
voters.as.data.frame <- flatten(fromJSON(voters.json, flatten=TRUE))
voters <- voters.as.data.frame %>% select(voter.party, voter.gender, vote)
voters$voter.party <- as.factor(unlist(voters$voter.party))
voters.party <- tally(group_by(voters, voter.party))
return(voters.party)
}
x1 <- GetPartyMakeup("s1-2009")
colnames(x1)[2] <- "1"
x2 <- GetPartyMakeup("s215-2009") %>% select(n)
colnames(x2)[1] <- "2"
x3 <- GetPartyMakeup("s397-2009") %>% select(n)
colnames(x3)[1] <- "3"
x4 <- GetPartyMakeup("s1-2010") %>% select(n)
colnames(x4)[1] <- "4"
x5 <- GetPartyMakeup("s105-2010") %>% select(n)
colnames(x5)[1] <- "5"
x6 <- GetPartyMakeup("s299-2010") %>% select(n)
colnames(x6)[1] <- "6"
x7 <- GetPartyMakeup("s1-2011") %>% select(n)
colnames(x7)[1] <- "7"
x8 <- GetPartyMakeup("s105-2011") %>% select(n)
colnames(x8)[1] <- "8"
x9 <- GetPartyMakeup("s235-2011") %>% select(n)
colnames(x9)[1] <- "9"
x10 <- GetPartyMakeup("s1-2012") %>% select(n)
colnames(x10)[1] <- "10"
x11 <- GetPartyMakeup("s173-2012") %>% select(n)
colnames(x11)[1] <- "11"
x12 <- GetPartyMakeup("s250-2012") %>% select(n)
colnames(x12)[1] <- "12"
x13 <- GetPartyMakeup("s1-2013") %>% select(n)
colnames(x13)[1] <- "13"
x14 <- GetPartyMakeup("s169-2013") %>% select(n)
colnames(x14)[1] <- "14"
x15 <- GetPartyMakeup("s291-2013") %>% select(n)
colnames(x15)[1] <- "15"
x16 <- GetPartyMakeup("s1-2014") %>% select(n)
colnames(x16)[1] <- "16"
x17 <- GetPartyMakeup("s217-2014") %>% select(n)
colnames(x17)[1] <- "17"
x18 <- GetPartyMakeup("s366-2014") %>% select(n)
colnames(x18)[1] <- "18"
x19 <- GetPartyMakeup("s1-2015") %>% select(n)
colnames(x19)[1] <- "19"
x20 <- GetPartyMakeup("s221-2015") %>% select(n)
colnames(x20)[1] <- "20"
x21 <- GetPartyMakeup("s339-2015") %>% select(n)
colnames(x21)[1] <- "21"
x22 <- GetPartyMakeup("s1-2016") %>% select(n)
colnames(x22)[1] <- "22"
x23 <- GetPartyMakeup("s91-2016") %>% select(n)
colnames(x23)[1] <- "23"
x24 <- GetPartyMakeup("s163-2016") %>% select(n)
colnames(x24)[1] <- "24"
x25 <- GetPartyMakeup("s1-2017") %>% select(n)
colnames(x25)[1] <- "25"
x26 <- GetPartyMakeup("s80-2017") %>% select(n)
colnames(x26)[1] <- "26"
x <- cbind(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20,
x21, x22, x23, x24, x25, x26)
View(x)
col.names <- colnames(x)[-1]
col.names
x <- gather(x, key = stuff,
value  = imdumb,
col.names, convert = TRUE)
x <- gather(x, key = stuff,
value  = imdumb,
1:26, convert = TRUE)
View(x)
GetPartyMakeup <- function(roll.id) {
base <- ("http://congress.api.sunlightfoundation.com/")
votes.resource <- ("votes?roll_id=")
votes.filters <- ("&fields=voters")
votes.response <- GET(paste0(base, votes.resource, roll.id, votes.filters))
request.body.as.list <- content(votes.response)
voters.list <- request.body.as.list$results[[1]]$voters
names(voters.list) <- NULL
voters.json <- toJSON(voters.list)
voters.as.data.frame <- flatten(fromJSON(voters.json, flatten=TRUE))
voters <- voters.as.data.frame %>% select(voter.party, voter.gender, vote)
voters$voter.party <- as.factor(unlist(voters$voter.party))
voters.party <- tally(group_by(voters, voter.party))
return(voters.party)
}
x1 <- GetPartyMakeup("s1-2009")
colnames(x1)[2] <- "1"
x2 <- GetPartyMakeup("s215-2009") %>% select(n)
colnames(x2)[1] <- "2"
x3 <- GetPartyMakeup("s397-2009") %>% select(n)
colnames(x3)[1] <- "3"
x4 <- GetPartyMakeup("s1-2010") %>% select(n)
colnames(x4)[1] <- "4"
x5 <- GetPartyMakeup("s105-2010") %>% select(n)
colnames(x5)[1] <- "5"
x6 <- GetPartyMakeup("s299-2010") %>% select(n)
colnames(x6)[1] <- "6"
x7 <- GetPartyMakeup("s1-2011") %>% select(n)
colnames(x7)[1] <- "7"
x8 <- GetPartyMakeup("s105-2011") %>% select(n)
colnames(x8)[1] <- "8"
x9 <- GetPartyMakeup("s235-2011") %>% select(n)
colnames(x9)[1] <- "9"
x10 <- GetPartyMakeup("s1-2012") %>% select(n)
colnames(x10)[1] <- "10"
x11 <- GetPartyMakeup("s173-2012") %>% select(n)
colnames(x11)[1] <- "11"
x12 <- GetPartyMakeup("s250-2012") %>% select(n)
colnames(x12)[1] <- "12"
x13 <- GetPartyMakeup("s1-2013") %>% select(n)
colnames(x13)[1] <- "13"
x14 <- GetPartyMakeup("s169-2013") %>% select(n)
colnames(x14)[1] <- "14"
x15 <- GetPartyMakeup("s291-2013") %>% select(n)
colnames(x15)[1] <- "15"
x16 <- GetPartyMakeup("s1-2014") %>% select(n)
colnames(x16)[1] <- "16"
x17 <- GetPartyMakeup("s217-2014") %>% select(n)
colnames(x17)[1] <- "17"
x18 <- GetPartyMakeup("s366-2014") %>% select(n)
colnames(x18)[1] <- "18"
x19 <- GetPartyMakeup("s1-2015") %>% select(n)
colnames(x19)[1] <- "19"
x20 <- GetPartyMakeup("s221-2015") %>% select(n)
colnames(x20)[1] <- "20"
x21 <- GetPartyMakeup("s339-2015") %>% select(n)
colnames(x21)[1] <- "21"
x22 <- GetPartyMakeup("s1-2016") %>% select(n)
colnames(x22)[1] <- "22"
x23 <- GetPartyMakeup("s91-2016") %>% select(n)
colnames(x23)[1] <- "23"
x24 <- GetPartyMakeup("s163-2016") %>% select(n)
colnames(x24)[1] <- "24"
x25 <- GetPartyMakeup("s1-2017") %>% select(n)
colnames(x25)[1] <- "25"
x26 <- GetPartyMakeup("s80-2017") %>% select(n)
colnames(x26)[1] <- "26"
x <- cbind(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20,
x21, x22, x23, x24, x25, x26)
View(x)
x <- select(x, !voter.party)
x <- select(x, -voter.party)
View(x)
x <- gather(x, key = stuff,
value  = imdumb,
1:26, convert = TRUE)
View(x)
x <- data.frame(voter.party,x)
voter.party <- c("D", "I","R")
x <- data.frame(voter.party,x)
View(x)
GetPartyMakeup <- function(roll.id) {
base <- ("http://congress.api.sunlightfoundation.com/")
votes.resource <- ("votes?roll_id=")
votes.filters <- ("&fields=voters")
votes.response <- GET(paste0(base, votes.resource, roll.id, votes.filters))
request.body.as.list <- content(votes.response)
voters.list <- request.body.as.list$results[[1]]$voters
names(voters.list) <- NULL
voters.json <- toJSON(voters.list)
voters.as.data.frame <- flatten(fromJSON(voters.json, flatten=TRUE))
voters <- voters.as.data.frame %>% select(voter.party, voter.gender, vote)
voters$voter.party <- as.factor(unlist(voters$voter.party))
voters.party <- tally(group_by(voters, voter.party))
return(voters.party)
}
x1 <- GetPartyMakeup("s1-2009")
colnames(x1)[2] <- "1"
x2 <- GetPartyMakeup("s215-2009") %>% select(n)
colnames(x2)[1] <- "2"
x3 <- GetPartyMakeup("s397-2009") %>% select(n)
colnames(x3)[1] <- "3"
x4 <- GetPartyMakeup("s1-2010") %>% select(n)
colnames(x4)[1] <- "4"
x5 <- GetPartyMakeup("s105-2010") %>% select(n)
colnames(x5)[1] <- "5"
x6 <- GetPartyMakeup("s299-2010") %>% select(n)
colnames(x6)[1] <- "6"
x7 <- GetPartyMakeup("s1-2011") %>% select(n)
colnames(x7)[1] <- "7"
x8 <- GetPartyMakeup("s105-2011") %>% select(n)
colnames(x8)[1] <- "8"
x9 <- GetPartyMakeup("s235-2011") %>% select(n)
colnames(x9)[1] <- "9"
x10 <- GetPartyMakeup("s1-2012") %>% select(n)
colnames(x10)[1] <- "10"
x11 <- GetPartyMakeup("s173-2012") %>% select(n)
colnames(x11)[1] <- "11"
x12 <- GetPartyMakeup("s250-2012") %>% select(n)
colnames(x12)[1] <- "12"
x13 <- GetPartyMakeup("s1-2013") %>% select(n)
colnames(x13)[1] <- "13"
x14 <- GetPartyMakeup("s169-2013") %>% select(n)
colnames(x14)[1] <- "14"
x15 <- GetPartyMakeup("s291-2013") %>% select(n)
colnames(x15)[1] <- "15"
x16 <- GetPartyMakeup("s1-2014") %>% select(n)
colnames(x16)[1] <- "16"
x17 <- GetPartyMakeup("s217-2014") %>% select(n)
colnames(x17)[1] <- "17"
x18 <- GetPartyMakeup("s366-2014") %>% select(n)
colnames(x18)[1] <- "18"
x19 <- GetPartyMakeup("s1-2015") %>% select(n)
colnames(x19)[1] <- "19"
x20 <- GetPartyMakeup("s221-2015") %>% select(n)
colnames(x20)[1] <- "20"
x21 <- GetPartyMakeup("s339-2015") %>% select(n)
colnames(x21)[1] <- "21"
x22 <- GetPartyMakeup("s1-2016") %>% select(n)
colnames(x22)[1] <- "22"
x23 <- GetPartyMakeup("s91-2016") %>% select(n)
colnames(x23)[1] <- "23"
x24 <- GetPartyMakeup("s163-2016") %>% select(n)
colnames(x24)[1] <- "24"
x25 <- GetPartyMakeup("s1-2017") %>% select(n)
colnames(x25)[1] <- "25"
x26 <- GetPartyMakeup("s80-2017") %>% select(n)
colnames(x26)[1] <- "26"
x <- cbind(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20,
x21, x22, x23, x24, x25, x26)
View(x)
voter.party <- c("D", "I","R")
x <- select(x, -voter.party)
x <- gather(x, key = year,
value  = amount,
1:26, convert = TRUE)
x <- data.frame(voter.party,x)
ggplot(x, aes(x=year, y=amount, fill=voter.party)) +
geom_area()
ggplot(x, aes(x=year, y=amount, fill=voter.party, color = c("blue", "green","red"))) +
geom_area()
ggplot(x, aes(x=year, y=amount, fill=voter.party)) +
geom_area()
GetPartyMakeup <- function(roll.id) {
base <- ("http://congress.api.sunlightfoundation.com/")
votes.resource <- ("votes?roll_id=")
votes.filters <- ("&fields=voters")
votes.response <- GET(paste0(base, votes.resource, roll.id, votes.filters))
request.body.as.list <- content(votes.response)
voters.list <- request.body.as.list$results[[1]]$voters
names(voters.list) <- NULL
voters.json <- toJSON(voters.list)
voters.as.data.frame <- flatten(fromJSON(voters.json, flatten=TRUE))
voters <- voters.as.data.frame %>% select(voter.party, voter.gender, vote)
voters$voter.party <- as.factor(unlist(voters$voter.party))
voters.party <- tally(group_by(voters, voter.party))
return(voters.party)
}
x1 <- GetPartyMakeup("s1-2009")
colnames(x1)[2] <- "1"
x2 <- GetPartyMakeup("s215-2009") %>% select(n)
colnames(x2)[1] <- "2"
x3 <- GetPartyMakeup("s397-2009") %>% select(n)
colnames(x3)[1] <- "3"
x4 <- GetPartyMakeup("s1-2010") %>% select(n)
colnames(x4)[1] <- "4"
x5 <- GetPartyMakeup("s105-2010") %>% select(n)
colnames(x5)[1] <- "5"
x6 <- GetPartyMakeup("s299-2010") %>% select(n)
colnames(x6)[1] <- "6"
x7 <- GetPartyMakeup("s1-2011") %>% select(n)
colnames(x7)[1] <- "7"
x8 <- GetPartyMakeup("s105-2011") %>% select(n)
colnames(x8)[1] <- "8"
x9 <- GetPartyMakeup("s235-2011") %>% select(n)
colnames(x9)[1] <- "9"
x10 <- GetPartyMakeup("s1-2012") %>% select(n)
colnames(x10)[1] <- "10"
x11 <- GetPartyMakeup("s173-2012") %>% select(n)
colnames(x11)[1] <- "11"
x12 <- GetPartyMakeup("s250-2012") %>% select(n)
colnames(x12)[1] <- "12"
x13 <- GetPartyMakeup("s1-2013") %>% select(n)
colnames(x13)[1] <- "13"
x14 <- GetPartyMakeup("s169-2013") %>% select(n)
colnames(x14)[1] <- "14"
x15 <- GetPartyMakeup("s291-2013") %>% select(n)
colnames(x15)[1] <- "15"
x16 <- GetPartyMakeup("s1-2014") %>% select(n)
colnames(x16)[1] <- "16"
x17 <- GetPartyMakeup("s217-2014") %>% select(n)
colnames(x17)[1] <- "17"
x18 <- GetPartyMakeup("s366-2014") %>% select(n)
colnames(x18)[1] <- "18"
x19 <- GetPartyMakeup("s1-2015") %>% select(n)
colnames(x19)[1] <- "19"
x20 <- GetPartyMakeup("s221-2015") %>% select(n)
colnames(x20)[1] <- "20"
x21 <- GetPartyMakeup("s339-2015") %>% select(n)
colnames(x21)[1] <- "21"
x22 <- GetPartyMakeup("s1-2016") %>% select(n)
colnames(x22)[1] <- "22"
x23 <- GetPartyMakeup("s91-2016") %>% select(n)
colnames(x23)[1] <- "23"
x24 <- GetPartyMakeup("s163-2016") %>% select(n)
colnames(x24)[1] <- "24"
x25 <- GetPartyMakeup("s1-2017") %>% select(n)
colnames(x25)[1] <- "25"
x26 <- GetPartyMakeup("s80-2017") %>% select(n)
colnames(x26)[1] <- "26"
x <- cbind(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20,
x21, x22, x23, x24, x25, x26)
View(x)
x <- arrange(x, -voter.party)
x <- arrange(x, desc(voter.party))
View(x)
voter.party <- c("R", "I","D")
x <- select(x, -voter.party)
x <- gather(x, key = year,
value  = amount,
1:26, convert = TRUE)
x <- data.frame(voter.party,x)
ggplot(x, aes(x=year, y=amount, fill=voter.party)) +
geom_area()
View(x)
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
shiny::runApp('Desktop/info201/chipotle-crew-final')
install.packages("shinyJS")
install.packages("shinyjs")
shiny::runApp('Desktop/info201/chipotle-crew-final')
library(shinyjs)
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
runApp('Desktop/info201/chipotle-crew-final')
setwd("~/Desktop/info201/chipotle-crew-final")
shiny::runApp()
>>>>>>> 057d0d966d6429b85ac1f6a2fc0f59912202c82d
