# Create a variable "children.num" that is the total number of children on the Titanic
children.num <- sum(children$Freq)
print(children.num)
mostlosses <- print(paste(max(Titanic$Survived == "no", "Class"), max(Titanic$Survived == "no", "Sex"), max(Titanic$Survived == "no", "Age"))
mostlosses <- paste(max(Titanic$Survived == "no", "Class"), max(Titanic$Survived == "no", "Sex"), max(Titanic$Survived == "no", "Age"))
mostlosses <- paste(max(Titanic$Survived == "no", "Class"), max(Titanic$Survived == "no", "Sex"), max(Titanic$Survived == "no", "Age"))
print(mostlosses)
mostlosses <- paste([max(Titanic$Survived == "no", "Class"], max[Titanic$Survived == "no", "Sex"], max[Titanic$Survived == "no", "Age"])
mostlosses <- paste([max(Titanic$Survived == "no", "Class"], max[Titanic$Survived == "no", "Sex"], max[Titanic$Survived == "no", "Age"])
mostlosses <- paste([max(Titanic$Survived == "no"), "Class"], [max(Titanic$Survived == "no"), "Sex"], [max(Titanic$Survived == "no"), "Age"])
mostlosses <- paste(Titanic[max(Titanic$Survived == "no"), "Class"], Titanic[max(Titanic$Survived == "no"), "Sex"], Titanic[max(Titanic$Survived == "no"), "Age"])
print(mostlosses)
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titanic$Freq)
print(paste(Titaniclosses[Titaniclosses[Freq] == maxlosses, "Class"],
Titaniclosses[Titaniclosses[Freq] == maxlosses, "Sex"],
Titaniclosses[Titaniclosses[Freq] == maxlosses, "Age"]))
}
MostLosses(Titanic)
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titanic$Freq)
print(paste(Titaniclosses[Titaniclosses$Freq == maxlosses, "Class"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Sex"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Age"]))
}
MostLosses(Titanic)
Titanic <- data.frame(Titanic, stringsAsFactors = FALSE)
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titanic$Freq)
print(paste(Titaniclosses[Titaniclosses$Freq == maxlosses, "Class"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Sex"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Age"]))
}
MostLosses(Titanic)
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titanic$Freq)
# Output the row in the data frame which has the largest absolute number of losses
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titanic$Freq)
print(paste(Titaniclosses[Titaniclosses$Freq == maxlosses, "Class"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Sex"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Age"]))
}
MostLosses(Titanic)
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titaniclosses$Freq)
print(paste(Titaniclosses[Titaniclosses$Freq == maxlosses, "Class"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Sex"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Age"]))
}
MostLosses(Titanic)
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titaniclosses[Freq])
print(paste(Titaniclosses[Titaniclosses$Freq == maxlosses, "Class"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Sex"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Age"]))
}
MostLosses(Titanic)
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titaniclosses[Freq])
print(paste(Titaniclosses[Titaniclosses[Freq] == maxlosses, "Class"],
Titaniclosses[Titaniclosses[Freq] == maxlosses, "Sex"],
Titaniclosses[Titaniclosses[Freq] == maxlosses, "Age"]))
}
MostLosses(Titanic)
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titaniclosses[Freq])
print(Titaniclosses)
data(Titanic)
Titanic <- data.frame(Titanic, stringsAsFactors = FALSE)
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
maxlosses <- max(Titaniclosses[Freq])
print(paste(Titaniclosses[Titaniclosses[Freq] == maxlosses, "Class"],
Titaniclosses[Titaniclosses[Freq] == maxlosses, "Sex"],
Titaniclosses[Titaniclosses[Freq] == maxlosses, "Age"]))
}
MostLosses(Titanic)
print(Titaniclosses)
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
print(Titaniclosses)
data(Titanic)
View(Titanic)
Titanic <- data.frame(Titanic, stringsAsFactors = FALSE)
Titaniclosses <- Titanic[Titanic$Survived == "no", ]
print(Titaniclosses)
Titaniclosses <- Titanic[Titanic$Survived == "No", ]
print(Titaniclosses)
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "No", ]
maxlosses <- max(Titaniclosses[Freq])
print(paste(Titaniclosses[Titaniclosses[Freq] == maxlosses, "Class"],
Titaniclosses[Titaniclosses[Freq] == maxlosses, "Sex"],
Titaniclosses[Titaniclosses[Freq] == maxlosses, "Age"]))
}
MostLosses(Titanic)
MostLosses <- function(dataf) {
Titaniclosses <- Titanic[Titanic$Survived == "No", ]
maxlosses <- max(Titaniclosses$Freq)
print(paste(Titaniclosses[Titaniclosses$Freq == maxlosses, "Class"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Sex"],
Titaniclosses[Titaniclosses$Freq == maxlosses, "Age"]))
}
print(Titaniclosses)
MostLosses(Titanic)
mostlosses <- MostLosses(Titanic)
?sum
SurvivalRate <- function(ticketclass) {
totalmen <- sum(Titanic$Freq, Titanic$Class == ticketclass, Titanic$Sex == "Male", Titanic$Age == "Adult")
survivedmen <- sum(Titanic$Freq, Titanic$Class == ticketclass, Titanic$Sex == "Male", Titanic$Age == "Adult", Titanic$Survived == "Yes")
survivalrate
rateofmen <- survivedmen/totalmen
totalwomen <- sum(Titanic$Freq, Titanic$Class == ticketclass, Titanic$Sex == "Female", Titanic$Age == "Adult")
totalchildren <- sum(Titanic$Freq, Titanic$Class == ticketclass, Titanic$Age == "Child")
survivedwomen <- sum(Titanic$Freq, Titanic$Class == ticketclass, Titanic$Sex == "Female", Titanic$Age == "Adult", Titanic$Survived = "Yes")
survivedchildren <- sum(Titanic$Freq, Titanic$Class == ticketclass, Titanic$Age == "Child", Titanic$Survived == "Yes")
survivedwc <- survivedwomen + survivedchildren
totalwc <- totalchildren + totalwomen
rateofwc <- survivedwc/totalwc
print(paste("Of", ticketclass, "class," survivedwc, "% of women and children survived and", survivedmen, "% of men survived."))
}
# Define a function "SurvivalRate" that takes in a ticket class and returns a sentence about the survival rate.
SurvivalRate <- function(ticketclass) {
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Age == "Adult", Titanic$Class == ticketclass,]
totalmen <- sum(Titanicmen$Freq)
Titanicsurvivedmen <- Titanicmen[Titanicmen$Survived == "Yes", ]
survivedmen <- sum(Titanicsurvivedmen$Freq)
rateofmen <- survivedmen/totalmen
Titanicwomen <- Titanic[Titanic$Sex == "Female", Titanic$Age == "Adult", Titanic$Class == ticketclass,]
totalwomen <- sum(Titanicwomen$Freq)
Titanicchildren <- Titanic[Titanic$Age == "Child", Titanic$Class == ticketclass,]
totalchildren <- sum(Titanicchildren$Freq)
Titanicsurvivedwomen <- Titanicwomen[Titanicwomen$Survived == "Yes", ]
survivedwomen <- sum(Titanicsurvivedwomen$Freq)
Titanicsuvivedchildren <- Titanicchildren[Titanicchildren$Survived == "Yes", ]
survivedchildren <- sum(Titanicsuvivedchildren$Freq)
totalwc <- totalwomen + totalchildren
survivedwc <- survivedwomen + survivedchildren
rateofwc <- survivedwc/totalwc
print(paste("Of", ticketclass, "class," rateofwc, "% of women and children survived and", rateofmen, "% of men survived."))
}
SurvivalRate <- function(ticketclass) {
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Age == "Adult", Titanic$Class == ticketclass,]
totalmen <- sum(Titanicmen$Freq)
Titanicsurvivedmen <- Titanicmen[Titanicmen$Survived == "Yes", ]
survivedmen <- sum(Titanicsurvivedmen$Freq)
rateofmen <- survivedmen/totalmen
Titanicwomen <- Titanic[Titanic$Sex == "Female", Titanic$Age == "Adult", Titanic$Class == ticketclass,]
totalwomen <- sum(Titanicwomen$Freq)
Titanicchildren <- Titanic[Titanic$Age == "Child", Titanic$Class == ticketclass,]
totalchildren <- sum(Titanicchildren$Freq)
Titanicsurvivedwomen <- Titanicwomen[Titanicwomen$Survived == "Yes", ]
survivedwomen <- sum(Titanicsurvivedwomen$Freq)
Titanicsuvivedchildren <- Titanicchildren[Titanicchildren$Survived == "Yes", ]
survivedchildren <- sum(Titanicsuvivedchildren$Freq)
totalwc <- totalwomen + totalchildren
survivedwc <- survivedwomen + survivedchildren
rateofwc <- survivedwc/totalwc
print(paste("Of", ticketclass, "class,", rateofwc, "% of women and children survived and", rateofmen, "% of men survived."))
}
SurvivalRate("Crew")
# Define a function "SurvivalRate" that takes in a ticket class and returns a sentence about the survival rate.
SurvivalRate <- function(ticketclass) {
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Age == "Adult", Titanic$Class == ticketclass,]
totalmen <- sum(Titanicmen$Freq)
Titanicsurvivedmen <- Titanicmen[Titanicmen$Survived == "Yes", ]
survivedmen <- sum(Titanicsurvivedmen$Freq)
rateofmen <- survivedmen/totalmen
Titanicwomen <- Titanic[Titanic$Sex == "Female", Titanic$Age == "Adult", Titanic$Class == ticketclass,]
totalwomen <- sum(Titanicwomen$Freq)
Titanicchildren <- Titanic[Titanic$Age == "Child", Titanic$Class == ticketclass,]
totalchildren <- sum(Titanicchildren$Freq)
Titanicsurvivedwomen <- Titanicwomen[Titanicwomen$Survived == "Yes", ]
survivedwomen <- sum(Titanicsurvivedwomen$Freq)
Titanicsuvivedchildren <- Titanicchildren[Titanicchildren$Survived == "Yes", ]
survivedchildren <- sum(Titanicsuvivedchildren$Freq)
totalwc <- totalwomen + totalchildren
survivedwc <- survivedwomen + survivedchildren
rateofwc <- survivedwc/totalwc
print(paste("Of", ticketclass, "class,", rateofwc, "% of women and children survived and", rateofmen, "% of men survived."))
}
SurvivalRate("Crew")
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Age == "Adult", Titanic$Class == ticketclass,]
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Age == "Adult", Titanic$Class == "Crew", ]
Titanic <- data.frame(Titanic, stringsAsFactors = FALSE)
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Age == "Adult", Titanic$Class == "Crew", ]
children <- Titanic[Titanic$Age == "Child", ]
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Age == "Adult", Titanic$Class == "Crew", ]
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Age =="Adult", Titanic$Class == "Crew", ]
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Class == "Crew", ]
Titanicmen <- Titanic[Titanic$Sex == "Male", ]
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Class == "Crew", Titanic$Age == "Adult"]
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Class == "Crew", Titanic$Age == "Adult", ]
Titanicmen <- Titanic[Titanic$Sex == "Male", Titanic$Class == "Crew", Titanic$Age == "Adult", ]
titanicmen <- Titanic[!(Titanic$Sex == "Male" & Titanic$Class == "Crew" & Titanic$Age == "Adult"), ]
print(titanicmen)
titanicmen <- Titanic[!(Titanic$Sex == "Male" & Titanic$Class == "Crew" & Titanic$Age == "Adult"), ]
print(titanicmen)
titanicmen <- Titanic[!(Titanic$Sex == "Male" & Titanic$Class == "Crew" & Titanic$Age == "Adult"), ]
print(titanicmen)
Titanicmen <- Titanic[Titanic$Sex == "Male", ]
Titanicadultmen <- Titanicmen[Titanicadultmen$Age == "Adult",]
Titanicadultmeninclass <- Titanicadultmen[Titanicadultmen$Class == ticketclass,]
totalmen <- sum(Titanicadultmeninclass$Freq)
Titanicsurvivedmen <- Titanicadultmeninclass[Titanicadultmeninclass$Survived == "Yes", ]
survivedmen <- sum(Titanicsurvivedmen$Freq)
rateofmen <- survivedmen/totalmen
Titanicmen <- Titanic[Titanic$Sex == "Male", ]
Titanicadultmen <- Titanicmen[Titanicadultmen$Age == "Adult",]
Titanicadultmen <- Titanicmen[Titanicmen$Age == "Adult",]
Titanicmen <- Titanic[Titanic$Sex == "Male", ]
Titanicadultmen <- Titanicmen[Titanicmen$Age == "Adult",]
Titanicadultmeninclass <- Titanicadultmen[Titanicadultmen$Class == ticketclass,]
totalmen <- sum(Titanicadultmeninclass$Freq)
Titanicsurvivedmen <- Titanicadultmeninclass[Titanicadultmeninclass$Survived == "Yes", ]
survivedmen <- sum(Titanicsurvivedmen$Freq)
rateofmen <- survivedmen/totalmen
SurvivalRate <- function(ticketclass) {
Titanicmen <- Titanic[Titanic$Sex == "Male", ]
Titanicadultmen <- Titanicmen[Titanicmen$Age == "Adult",]
Titanicadultmeninclass <- Titanicadultmen[Titanicadultmen$Class == ticketclass,]
totalmen <- sum(Titanicadultmeninclass$Freq)
Titanicsurvivedmen <- Titanicadultmeninclass[Titanicadultmeninclass$Survived == "Yes", ]
survivedmen <- sum(Titanicsurvivedmen$Freq)
rateofmen <- survivedmen/totalmen
SurvivalRate <- function(ticketclass) {
Titanicmen <- Titanic[Titanic$Sex == "Male", ]
Titanicadultmen <- Titanicmen[Titanicmen$Age == "Adult",]
Titanicadultmeninclass <- Titanicadultmen[Titanicadultmen$Class == ticketclass,]
totalmen <- sum(Titanicadultmeninclass$Freq)
Titanicsurvivedmen <- Titanicadultmeninclass[Titanicadultmeninclass$Survived == "Yes", ]
survivedmen <- sum(Titanicsurvivedmen$Freq)
rateofmen <- survivedmen/totalmen
Titanicwomen <- Titanic[Titanic$Sex == "Female",]
Titanicadultwomen <- Titanicwomen[Titanicwomen$Age == "Adult",]
Titanicadultwomeninclass <- Titanicadultwomen[Titanicadultwomen$Class == ticketclass,]
totalwomen <- sum(Titanicadultwomeninclass$Freq)
Titanicchildren <- Titanic[Titanic$Age == "Child",]
Titanicchildreninclass <- Titanicchildren[Titanicchildren$Class == ticketclass,]
totalchildren <- sum(Titanicchildreninclass$Freq)
Titanicsurvivedwomen <- Titanicadultwomeninclass[Titanicadultwomeninclass$Survived == "Yes", ]
survivedwomen <- sum(Titanicsurvivedwomen$Freq)
Titanicsuvivedchildren <- Titanicchildreninclass[Titanicchildreninclass$Survived == "Yes", ]
survivedchildren <- sum(Titanicsuvivedchildren$Freq)
totalwc <- totalwomen + totalchildren
survivedwc <- survivedwomen + survivedchildren
rateofwc <- survivedwc/totalwc
print(paste("Of", ticketclass, "class,", rateofwc, "% of women and children survived and", rateofmen, "% of men survived."))
}
SurvivalRate("Crew")
print(SurvivalRate("Crew"))
library(jsonlite)
library(httr)
library(dplyr)
resource <- GET("http://pokeapi.co/api/v2")
baseurl <- content(resource)
baseurl <- ("http://pokeapi.co/api/v2")
baseurl <- ("http://pokeapi.co/api/v2")
movie <- c("oddish", "bellsprout", "vileplume", "ponyta")
pokemon.url <- paste0(baseurl, "/pokemon/", movie, "/")
response <- GET(pokemon.url)
print(pokemon.url)
movie <- ("oddish")
response <- GET(pokemon.url)
pokemon.url <- paste0(baseurl, "/pokemon/", movie, "/")
response <- GET(pokemon.url)
?names
names(response)
return(response$status_code)
print(response$status_code)
body <- content(response, "text")
response <- GET(pokemon.url)
body <- content(response, "text")
pokemon.url <- paste0(baseurl, "/pokemon/", movie, "/") %>% print()
body <- content(response, "text")
body
poke.data <- fromJSON(body)
names(poke.data)
is.data.frame(poke.data) %>% print()
is.data.frame(poke.data$moves) %>% print()
poke.moves <- head(poke.data$moves)
poke.moves <- flatten(poke.moves)
colnames(poke.moves)
colnames(poke.moves) %>% print()
poke.moves <- poke.moves %>% select(move.name)
print(poke.moves)
poke.moves <- mutate(poke.moves, move.type = c("normal", "normal", "normal", "normal", "poison", "grass"), move.rate = runif(6, min = 1, max = 5))
print(poke.moves)
poke.moves <- mutate(poke.moves, move.type = c("normal", "normal", "normal", "normal", "poison", "grass"), move.rate = runif(6, min = 1, max = 5))
print(poke.moves)
poke.moves <- mutate(poke.moves, move.type = c("normal", "normal", "normal", "normal", "poison", "grass"), move.rate = round(runif(6, min = 1, max = 5), digits = -2))
print(poke.moves)
poke.moves <- mutate(poke.moves, move.type = c("normal", "normal", "normal", "normal", "poison", "grass"), move.rate = round(runif(6, min = 1, max = 5), digits = 0))
print(poke.moves)
poke.moves %>% arrange(-move.rate)
countdownSB <- spring.break - Sys.Date()
countdownbday <- as.Date(2017-05-04) - Sys.Date()
bday <- as.Date(2017-05-04)
bday <- as.Date(2017/05/04)
bday <- as.Date("2017/05/04")
countdownbday <- bday - Sys.Date()
daysof <- as.Date("2015/06/05") - Sys.Date
daysof <- as.Date("2015/06/05") - Sys.Date(),
daysof <- as.Date("2015/06/05") - Sys.Date()
print(countdownSB)
print(countdownbday)
print(spring.break)
countdownSB <- as.Date("2017/03/14") - Sys.Date()
print(countdownSB)
print(countdownbday)
print(spring.break)
print(daysof)
daysof <- Sys.Date() - as.Date("2015/06/05")
print(daysof)
print(countdownSB)
print(countdownbday)
print(spring.break)
print(daysof)
countdownSB <- as.Date("2017/03/14") - Sys.Date()
countdownbday <- bday - Sys.Date()
bday <- as.Date("2017/05/04")
daysof <- Sys.Date() - as.Date("2015/06/05")
print(countdownSB)
print(countdownbday)
print(spring.break)
print(daysof)
bb8 + theme_void()
library("dplyr")
library("ggplot2")
library("sp")
library("rgeos")
coord_circle <- function(centre = c(0, 0), r = 1, n = 1000) {
data_frame(
x = seq(from = 0 - r, to = 0 + r, length.out = n %/% 2),
y = sqrt(r^2 - x^2)
) %>% bind_rows(., -.) %>%
mutate(x = x + centre[1], y = y + centre[2])
}
install.packages("sp")
install.packages("rgeos")
library("sp")
library("rgeos")
coord_circle <- function(centre = c(0, 0), r = 1, n = 1000) {
data_frame(
x = seq(from = 0 - r, to = 0 + r, length.out = n %/% 2),
y = sqrt(r^2 - x^2)
) %>% bind_rows(., -.) %>%
mutate(x = x + centre[1], y = y + centre[2])
}
create_poly <- function(...) {
args <- list(...)
SpatialPolygons(
lapply(
X = seq_along(args),
FUN = function(x) {
Polygons(list(Polygon(as.data.frame(args[[x]]))), names(args)[x])
}
)
)
}
echancrure <- function(to_var, by_var, p = 0.1) {
ind <- which(by_var >= -0.08 & by_var <= 0.08 & to_var > 0)
to_var[ind] <- to_var[ind] - p
ind <- which(by_var >= -0.08 & by_var <= 0.08 & to_var < 0)
to_var[ind] <- to_var[ind] + p
return(to_var)
}
droid_body <- coord_circle(centre = c(0, 0), r = 1)
droid_body$xvert <- 0
droid_body$yvert <- droid_body$x
droid_body <- bind_cols(
droid_body,
coord_circle(centre = c(0, 0), r = 0.35, n = nrow(droid_body)) %>% select(xint = x, yint = y)
)
droid_body_rect <- data_frame(
x = c(-0.5, 0.5, 0.5, -0.5, c(-0.5, 0.5, 0.5, -0.5) - 0.2, c(-0.5, 0.5, 0.5, -0.5) + 0.2),
y = c(-0.6, 0.4, 0.6, -0.4, c(-0.6, 0.4, 0.6, -0.4) + 0.2, c(-0.6, 0.4, 0.6, -0.4) - 0.2),
group = rep(1:3, each = 4)
)
polyrect <- create_poly(
"polyrect1" = droid_body_rect[droid_body_rect$group == 1, 1:2],
"polyrect2" = droid_body_rect[droid_body_rect$group == 2, 1:2],
"polyrect3" = droid_body_rect[droid_body_rect$group == 3, 1:2]
)
polycircle <- create_poly(
"polycircle" = droid_body[, c("xint", "yint")]
)
polyrect <- gIntersection(spgeom1 = polyrect, spgeom2 = polycircle)
droid_body_rect <- fortify(polyrect)
ring <- coord_circle(centre = c(0, 0), r = 0.4)
ring$y <- echancrure(to_var = ring$y, by_var = ring$x, p = 0.1)
ring$x <- echancrure(to_var = ring$x, by_var = ring$y, p = 0.1)
ring <- bind_rows(
ring %>% mutate(group = (x >= 0) * 1),
coord_circle(centre = c(0, 0), r = 0.55, n = nrow(ring)) %>% mutate(y = -y, group = (x >= 0) * 1)
) %>%
filter(group == 1) # oups something went wrong
ring <- bind_rows(ring, ring %>% mutate(x = -x, group = 2))
ring_left <- ring %>% filter(group == 1)
ring_left$x <- ring_left$x - 1.3
ring_right <- ring %>% filter(group == 2)
ring_right$x <- ring_right$x + 1.3
polyring <- create_poly(
"polyring_g" = ring_left[, c("x", "y")],
"polyring_d" = ring_right[, c("x", "y")]
)
polydroid_body <- create_poly("polydroid_body" = droid_body[, c("x", "y")])
polyring <- gIntersection(spgeom1 = polyring, spgeom2 = polydroid_body)
fort_ring <- fortify(polyring)
ligne_hori <- data_frame(
x = c(-1, range(ring$x), 1),
y = 0,
group = c(1, 1, 2, 2)
)
droid_head <- coord_circle(centre = c(0, 1.02), r = 0.52) %>%
filter(y >= 1.02) %>%
mutate(group = 1, fill = "white", col= "black") %>%
bind_rows(
data_frame(
x = c(-0.52, -0.4, 0.4, 0.52),
y = c(1.02, 0.95, 0.95, 1.02),
group = 2, fill = "white", col= "black"
)
)
poly_head_grey <- create_poly(
"poly_head_grey_haut" = data_frame(
x = c(-0.52, 0.52, 0.52, -0.52),
y = c(1.44, 1.44, 1.51, 1.51)
),
"poly_head_grey_bas" = data_frame(
x = c(-0.52, 0.52, 0.52, -0.52),
y = c(1.02, 1.02, 1.07, 1.07)
)
)
polydroid_head <- create_poly("polydroid_head" = droid_head[droid_head$group == 1, c("x", "y")])
poly_head_grey <- gIntersection(spgeom1 = poly_head_grey, spgeom2 = polydroid_head)
fort_droid_headrectgris <- fortify(poly_head_grey)
poly_head_orange <- create_poly(
"poly_head_orange1" = data_frame(
x = c(-0.52, 0.52, 0.52, -0.52),
y = c(1.38, 1.38, 1.42, 1.42)
),
"poly_head_orange2" = data_frame(
x = c(-0.35, -0.35, -0.2, -0.2),
y = c(1.07, 1.15, 1.15, 1.07)
),
"poly_head_orange3" = data_frame(
x = c(-0.55, -0.55, -0.45, -0.45),
y = c(1.07, 1.15, 1.15, 1.07)
),
"poly_head_orange4" = data_frame(
x = c(0.44, 0.44, 0.47, 0.47),
y = c(1.07, 1.15, 1.15, 1.07)
)
)
poly_head_orange <- gIntersection(spgeom1 = poly_head_orange, spgeom2 = polydroid_head)
fort_droid_headrectorange <- fortify(poly_head_orange)
polygones_droid_head <- bind_rows(
fort_droid_headrectgris %>% select(-piece) %>%
mutate(group = as.numeric(as.character(group)), fill = "#8E8E9C", col= "black"),
fort_droid_headrectorange %>% select(-piece) %>%
mutate(group = as.numeric(as.character(group)) * 2, fill = "#DF8D5D", col= "black")
)
droid_eyes <- bind_rows(
coord_circle(centre = c(0, 1.35), r = 0.14) %>% mutate(group = 1, fill = "white", col = "white"),
coord_circle(centre = c(0, 1.35), r = 0.12) %>% mutate(group = 2, fill = "white", col = "black"),
coord_circle(centre = c(0, 1.35), r = 0.10) %>% mutate(group = 3, fill = "grey40", col = "grey40"),
coord_circle(centre = c(0, 1.35), r = 0.08) %>% mutate(group = 4, fill = "black", col = "black"),
coord_circle(centre = c(0, 1.16), r = 0.04) %>% mutate(group = 5, fill = "#76B1DE", col = "black"),
coord_circle(centre = c(0.25, 1.20), r = 0.08) %>% mutate(group = 6, fill = "black", col = "black"),
coord_circle(centre = c(0.25, 1.20), r = 0.07) %>% mutate(group = 7, fill = "white", col = "black"),
coord_circle(centre = c(0.25, 1.20), r = 0.06) %>% mutate(group = 8, fill = "grey40", col = "grey40"),
coord_circle(centre = c(0.25, 1.20), r = 0.04) %>% mutate(group = 9, fill = "black", col = "black")
)
eye_line <- data_frame(
x = 0,
y = c(1.07, 1.16-0.04)
)
antennas <- data_frame(
x = c(0.01, 0.01, 0.10, 0.10),
y = c(sqrt(0.52^2 - 0.01^2) + 1.02, sqrt(0.52^2 - 0.01^2) + 1.02 + 0.15,
sqrt(0.52^2 - 0.1^2) + 1.02, sqrt(0.52^2 - 0.1^2) + 1.02 + 0.25),
group = c(1, 1, 2, 2)
)
bb8 <- ggplot(data = droid_body) +
coord_fixed() +
geom_polygon(mapping = aes(x = x, y = y), fill = "white", col = "black") +
geom_polygon(data = droid_body_rect, mapping = aes(x = long, y = lat, group = group), fill = "#8E8E9C") +
geom_path(mapping = aes(x = xvert, y = yvert)) +
geom_path(mapping = aes(x = xint, y = yint)) +
geom_polygon(data = ring, mapping = aes(x = x, y = y, group = group), fill = "#DF8D5D", col = "#DF8D5D") +
geom_path(data = ligne_hori, mapping = aes(x = x, y = y, group = group)) +
geom_polygon(data = fort_ring , mapping = aes(x = long, y = lat, group = group), fill = "#DF8D5D") +
geom_polygon(data = droid_head, mapping = aes(x = x, y = y, group = group, fill = fill, col = col)) +
geom_polygon(data = polygones_droid_head, mapping = aes(x = long, y = lat, group = group, fill = fill, col = col)) +
geom_polygon(data = droid_eyes, mapping = aes(x = x, y = y, group = group, fill = fill, col = col)) +
scale_fill_identity() + scale_color_identity() +
geom_line(data = eye_line, mapping = aes(x = x, y = y)) +
geom_line(data = antennas, mapping = aes(x = x, y = y, group = group), col = "black")
bb8
bb8 + theme_void()
bb8
bb8 + theme_void()
bb8 + theme_void()
shiny::runApp('Desktop/info201/chipotle-crew-final')
